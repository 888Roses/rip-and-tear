plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'io.github.ladysnake.chenille' version '0.14.0'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

chenille {
    customLicense = rootProject.file("LICENSE")
    github = new URL("https://https://github.com/888Roses/rip-and-tear")
    javaVersion = 21
    configurePublishing {
        withLadysnakeMaven()
        withGithubRelease()
        withModrinthRelease()
        withCurseforgeRelease()
    }
}

loom {
    accessWidenerPath = file("src/main/resources/rip_and_tear.accesswidener")
}

fabricApi {
    configureDataGeneration {
        client = true
    }
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.

    chenille.repositories.ladysnake()
    chenille.repositories.terraformers()
    chenille.repositories.modrinth()
    maven {
        name "datasync"
        url "https://maven.uuid.gg/releases"
    }
    maven {
        name "appleskin"
        url "https://maven.ryanliptak.com/"
    }
    chenille.repositories.jitpack()
}

dependencies {
    // // To change the versions see the gradle.properties file
    // minecraft "com.mojang:minecraft:${project.minecraft_version}"
    // mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    // modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
//
    // modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    // modImplementation "moriyashiine:strawberrylib:${strawberrylib_version}"

    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings "net.fabricmc:yarn:${yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${loader_version}"

    modImplementation "org.ladysnake.cardinal-components-api:cardinal-components-base:${cardinal_components_version}"
    modImplementation "org.ladysnake.cardinal-components-api:cardinal-components-entity:${cardinal_components_version}"
    modIncludeImplementation "org.ladysnake.cardinal-components-api:cardinal-components-block:${cardinal_components_version}"
    modIncludeImplementation "org.ladysnake.cardinal-components-api:cardinal-components-world:${cardinal_components_version}"
    modIncludeImplementation "maven.modrinth:midnightlib:${midnightlib_version}"
    modIncludeImplementation "com.github.MoriyaShiine:tooltipfix:${tooltipfix_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    modImplementation "moriyashiine:strawberrylib:${strawberrylib_version}"

//    modCompileOnly "io.github.apace100:apoli:${apoli_version}"
    modCompileOnly("squeek.appleskin:appleskin-fabric:${appleskin_version}:api") {
        transitive = false
    }
    modLocalImplementation "maven.modrinth:sodium:${sodium_version}"
    modCompileOnly "maven.modrinth:iris:${iris_version}"

    modLocalRuntime "com.terraformersmc:modmenu:${mod_menu_version}"
}

processResources {
    // inputs.property "version", project.version
    // inputs.property "minecraft_version", project.minecraft_version
    // inputs.property "loader_version", project.loader_version
    // filteringCharset "UTF-8"
//
    // filesMatching("fabric.mod.json") {
    //     expand "version": project.version,
    //             "minecraft_version": project.minecraft_version,
    //             "loader_version": project.loader_version
    // }

    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

java {
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}" }
    }
}

// def targetJavaVersion = 21
// tasks.withType(JavaCompile).configureEach {
//     // ensure that the encoding is set to UTF-8, no matter what the system default is
//     // this fixes some edge cases with special characters not displaying correctly
//     // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
//     // If Javadoc is generated, this must be specified in that task too.
//     it.options.encoding = "UTF-8"
//     if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
//         it.options.release.set(targetJavaVersion)
//     }
// }
//
// java {
//     def javaVersion = JavaVersion.toVersion(targetJavaVersion)
//     if (JavaVersion.current() < javaVersion) {
//         toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
//     }
//     // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
//     // if it is present.
//     // If you remove this line, sources will not be generated.
//     withSourcesJar()
// }
//
// jar {
//     from("LICENSE") {
//         rename { "${it}_${project.archivesBaseName}" }
//     }
// }
//
// // configure the maven publication
// publishing {
//     publications {
//         create("mavenJava", MavenPublication) {
//             artifactId = project.archives_base_name
//             from components.java
//         }
//     }
//
//     // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
//     repositories {
//         // Add repositories to publish to here.
//         // Notice: This block does NOT have the same function as the block in the top level.
//         // The repositories here will be used for publishing your artifact, not for
//         // retrieving dependencies.
//     }
// }
//